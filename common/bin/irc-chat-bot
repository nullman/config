#!/usr/bin/env perl
#===============================================================================
# irc-chat-bot
#
# Run an irc chat bot that responds using elizatalk and performs various other
# actions.
#
# Author: Kyle W T Sherman
#===============================================================================

BEGIN { $^W = 1; }

use strict;
use warnings;
use Getopt::Long;
use Net::IRC;
use Text::Wrapper;
use Data::Dumper;

# debug mode
my $debug = 0;

# irc vars
my ($help, $irc_server, $irc_port, @irc_channels, $irc_nick, $irc_name, $irc_username, $irc_password, $quiet);

# bot command
#my $bot = "im-bot-eliza";
my $bot = "$ENV{HOME}/bin/im-bot-eliza";

# bot command list
my %botcmdlist = ("help" => undef, ".h" => undef,
                  "eliza" => undef, ".e" => undef,
                  "today" => undef, ".y" => undef,
                  "fortune" => undef, ".f" => undef,
                  "quote" => undef, ".q" => undef,
                  "google" => undef, ".g" => undef,
                  "lucky" => undef, ".l" => undef,
                  "calc" => undef, ".c" => undef,
                  "date" => undef, ".d" => undef,
                  "time" => undef, ".t" => undef,
                  "uptime" => undef, ".up" => undef,
                  "uuid" => undef, ".u" => undef,
                  "key" => undef, ".k" => undef,
                  "keym" => undef, ".km" => undef,
                  "keyc" => undef, ".kc" => undef);

# control command list
my %controlcmdlist = ("chat" => undef, "chatmode" => undef,
                      "chat on" => undef, "chatmode on" => undef,
                      "chat off" => undef, "chatmode off" => undef);

# default nick
my $default_nick = "chatbot";

# default channels
my $default_channel = "#test";

# text wrapped size
my $wrapped_size = 400;

# seconds before bot considers there to be no activity
my $activity_delay = 60;

# seconds to wait for someone else to respond before jumping in
my $response_delay = 15;

# regular expressions to notice in chat
my @notice_list = ();

# regular expressions of nicks to ignore
my @ignore_nick_list = ();

# get parameters
Getopt::Long::Configure('bundling');
GetOptions('h|help' => \$help,
           's|server:s' => \$irc_server,
           'p|port:i' => \$irc_port,
           'c|channel:s' => \@irc_channels,
           'n|nick:s' => \$irc_nick,
           'i|ircname:s' => \$irc_name,
           'u|username:s' => \$irc_username,
           'w|password:s' => \$irc_password,
           'q|quiet' => \$quiet);

# allow for comma seperated channels
@irc_channels = split(/,/, join(',', @irc_channels));

# set server if passed in without option word
if (!defined($irc_server) && defined($ARGV[0])) {
    $irc_server = $ARGV[0];
}

# set help if no server is given
if (!defined($irc_server)) {
    $help = 1;
}

# set default values for parameters not given
if (!defined($irc_port)) { $irc_port = 6667; }
if (!@irc_channels) { @irc_channels = ($default_channel); }
if (!defined($irc_nick)) { $irc_nick = $default_nick; }
if (!defined($irc_name)) { $irc_name = $irc_nick; }
if (!defined($irc_username)) { $irc_username = $irc_nick; }
if (!defined($irc_password)) { $irc_password = undef; }

# add nick to notice list
@notice_list = (@notice_list, "\\s$irc_nick\\s", "^$irc_nick", "$irc_nick\$");

# add nick to ignore nick list
@ignore_nick_list = (@ignore_nick_list, "^$irc_nick\$");
# add other nicks to ignore
@ignore_nick_list = (@ignore_nick_list, "bot");

# print usage
if (defined($help)) {
    print("Usage: irc-chat-bot [OPTION]... [-s|--server] SERVER\n");
    print("Start an irc chat bot on SERVER.\n");
    print("  -h, --help      help\n");
    print("  -s, --server    irc server address\n");
    print("  -p, --port      server port (defaults to 6667)\n");
    print("  -c, --channel   channel to join (defaults to `$default_channel')\n");
    print("                  this option may be used multiple times\n");
    print("                  you can also seperate channels with commas\n");
    print("  -n, --nick      nick (defaults to `$default_nick')\n");
    print("  -i, --ircname   irc name (defaults to `$default_nick')\n");
    print("  -u, --username  username (defaults to `$default_nick')\n");
    print("  -w, --password  password (defaults to none)\n");
    print("  -q, --quiet     quiet mode (defaults to normal)\n");
    exit;
}

# create wrapped text object
my $wrapper = new Text::Wrapper(columns => $wrapped_size);

# create irc object
my $irc = new Net::IRC;

# create irc connection
my $conn = $irc->newconn(
    Server      => $irc_server,
    Port        => $irc_port,
    Nick        => $irc_nick,
    Ircname     => $irc_name,
    Username    => $irc_username,
    Password    => $irc_password
);

# set conn vars to starting values
$conn->{chatmode} = 0;
$conn->{lastmsg} = "";
$conn->{lastto} = "";
$conn->{lastnick} = "";
$conn->{status} = 0;
$conn->{oldtime} = time;
$conn->{newtime} = time;
$conn->{waittime} = 0;

if (defined($quiet)) {
    # start with chatmode disabled
    $conn->{chatmode} = -1;
}

# join_channel
sub join_channel {
    my ($conn, $channel) = @_;

    # join channel
    $conn->join($channel);
    if (!defined($quiet)) {
        $conn->privmsg($channel, "Hello, $irc_nick here");
    }
}

# part_channel
sub part_channel {
    my ($conn, $channel) = @_;

    # part channel
    if (!defined($quiet)) {
        $conn->privmsg($channel, "I'm leaving now, goodbye");
    }
    $conn->part($channel);
}

# on_connect
sub on_connect {
    # shift in connection object that is passed automatically
    my $conn = shift;
    #print(Dumper($conn));

    # join channel
    foreach my $channel (@irc_channels) {
        join_channel($conn, $channel);
    }
    $conn->{connected} = 1;
}

# on_join
sub on_join {
    # get connection object and the event object, that are passed automatically
    my ($conn, $event) = @_;
    #print(Dumper($event));

    # get nick that just joined
    my $nick = $event->{nick};

    # say hello to the nick in public
    if (!defined($quiet)) {
        $conn->privmsg($conn->{channel}, "Hello, $nick");
    }
}

# on_part
sub on_part {
    # get connection object and the event object, that are passed automatically
    my ($conn, $event) = @_;
    #print(Dumper($event));

    # get nick that just left
    my $nick = $event->{nick};

    # say goodbye to the nick in public
    if (!defined($quiet)) {
        $conn->privmsg($conn->{channel}, "Goodbye, $nick");
    }
}

# on_public
sub on_public {
    # get connection object and the event object, that are passed automatically
    my ($conn, $event) = @_;
    #print(Dumper($event));

    # get conn vars
    my $to = $event->{to}[0];
    my $msg = $event->{args}[0];
    my $chatmode = $conn->{chatmode};
    my $nick = $event->{nick};
    my $lastnick = $conn->{lastnick};
    my $status = $conn->{status};
    if ($debug == 1) { print("on_public: to: $to, msg: $msg, chatmode: $chatmode, nick: $nick, lastnick: $lastnick, status: $status\n"); }

    # update lastto
    $conn->{lastto} = $to;

    # update lastmsg
    $conn->{lastmsg} = $msg;

    # if in chatmode and someone else speaks, exit chatmode
    if ($chatmode == 1 && $lastnick ne $nick) {
        if ($debug == 1) { print("on_public: turning off chatmode\n"); }
        $conn->{chatmode} = 0;
        $conn->{status} = 0;
        $chatmode = 0;
    }

    # if in status 1 and more than one person speaks, clear status
    if ($status == 1 && $lastnick ne $nick && $lastnick ne "") {
        if ($debug == 1) { print("on_public: setting status to 0 (normal)\n"); }
        $conn->{status} = 0;
    }

    # update lastnick
    $conn->{lastnick} = $nick;

    # check for ignore condition
    my $ignore = 0;
    foreach my $item (@ignore_nick_list) {
        if ($nick =~ $item) { $ignore = 1; last; }
    }
    if ($debug == 1 && $ignore == 1) { print("on_public: ignore was set\n"); }

    # only continue if not ignoring
    if ($ignore == 0) {
        # check for notice condition
        my $notice = 0;
        foreach my $item (@notice_list) {
            if ($msg =~ $item) { $notice = 1; last; }
        }
        if ($debug == 1 && $notice == 1) { print("on_public: notice was set\n"); }

        # get command portion of message
        my @parts = split(/ /, $msg);
        my $cmd = $parts[0];
        if ($debug == 1) { print("on_public: possilbe command extracted: $cmd\n"); }

        # if help is asked for, reply via a private msg (call bot)
        if ($msg eq "help" || $msg eq ".h") {
            if ($debug == 1) { print("on_public: calling bot (help)\n"); }
            call_bot($conn, $nick, $msg);
        }
        # else if control command given, handle control
        elsif (exists($controlcmdlist{$cmd})) {
            if ($debug == 1) { print("on_public: handling control (command): $msg\n"); }
            handle_control($conn, $to, $msg);
        }
        # else if bot command given, call bot
        elsif (exists($botcmdlist{$cmd})) {
            if ($debug == 1) { print("on_public: calling bot (command): $msg\n"); }
            call_bot($conn, $to, $msg);
        }
        # else if notice expression given, call bot
        elsif ($notice == 1) {
            if ($debug == 1) { print("on_public: calling bot (notice)\n"); }
            call_bot($conn, $to, $msg);
        }
        # else if in chatmode, call bot
        elsif ($chatmode == 1) {
            if ($debug == 1) { print("on_public: calling bot (chat mode)\n"); }
            call_bot($conn, $to, $msg);
        }
        # else, do nothing
    }
    else {
        if ($debug == 1) { print("on_public: ignoring nick: $nick\n"); }
    }

    # reset wait time
    $conn->{waittime} = 0;
}

# on_msg
sub on_msg {
    # get connection object and the event object, that are passed automatically
    my ($conn, $event) = @_;
    #print(Dumper($event));

    # get nick
    my $nick = $event->{nick};

    # get msg
    my $msg = $event->{args}[0];

    if ($debug == 1) { print("on_msg: nick: $nick, msg: $msg\n"); }

    # call bot
    if ($debug == 1) { print("on_msg: calling bot\n"); }
    call_bot($conn, $nick, $msg);
}

# dumper
sub dumper {
    # get connection object and the event object, that are passed automatically
    my ($conn, $event) = @_;

    print(Dumper($event));
}

# event handlers
$conn->add_handler('endofmotd', \&on_connect);
$conn->add_handler('join', \&on_join);
$conn->add_handler('part', \&on_part);
$conn->add_handler('public', \&on_public);
$conn->add_handler('msg', \&on_msg);
$conn->add_handler('cping', \&dumper);

# # start irc client
# $irc->start();

# call_bot
sub call_bot {
    my ($conn, $to, $msg) = @_;

    # clean up msg
    $msg =~ s/\'/\\\'/;
    $msg =~ s/\"/\\\"/;
    if ($debug == 1) { print("call_bot: to: $to, msg: $msg\n"); }
    open(OUT, "CONTACT_NICK=$to $bot $msg |");
    foreach my $botresponse (<OUT>) {
        # clean up botresponse
        $botresponse =~ s/\t/    /;
        # wrap botresponse if it is too long
        my @wrapped = split("\n", $wrapper->wrap($botresponse));
        # loop through wrapped response lines
        foreach my $response (@wrapped) {
            #print(Dumper($response));
            if ($debug == 1) { print("call_bot: response: $response\n"); }
            $conn->privmsg($to, $response);
            # delay to prevent flood issues
            #sleep 0.2;
        }
    }
    close(OUT);
    # if help was requested, add irc-chat-bot commands
    if ($msg eq "help" || $msg eq ".h") {
        my @output = ("Behavior commands I understand:",
                      "  chatmode     (chat)     - chatmode status",
                      "  chatmode on  (chat on)  - turn on chatmode",
                      "  chatmode off (chat off) - turn off chatmode");
        # loop through output lines
        foreach my $response (@output) {
            #print(Dumper($response));
            if ($debug == 1) { print("call_bot: response: $response\n"); }
            $conn->privmsg($to, $response);
            # delay to prevent flood issues
            #sleep 0.2;
        }
    }
}

# handle_control
sub handle_control {
    my ($conn, $to, $msg) = @_;

    # handle chatmode
    if (substr($msg, 0, 4) == "chat") {
        my $chatmode = $conn->{chatmode};
        my $response;

        # query chatmode
        if ($msg eq "chat" || $msg eq "chatmode") {
            if ($chatmode == -1) {
                $response = "chatmode is currently disabled; type \"chatmode on\" to enable it";
            }
            else {
                $response = "chatmode is currently enabled; type \"chatmode off\" to disable it";
            }
        }
        # turn on chatmode
        elsif ($msg eq "chat on" || $msg eq "chatmode on") {
            $chatmode = 1;
            $response = "chatmode enabled";
        }
        # turn off chatmode
        elsif ($msg eq "chat off" || $msg eq "chatmode off") {
            $chatmode = -1;
            $response = "chatmode disabled";
        }

        # set connection chatmode
        $conn->{chatmode} = $chatmode;

        # respond with current chatmode status
        if ($debug == 1) { print("handle_control: response: $response\n"); }
        $conn->privmsg($to, $response);
    }
}

# handle_eliza
sub handle_eliza {
    my $conn = shift;

    # set oldtime to newtime
    $conn->{oldtime} = $conn->{newtime};
    # set newtime to now
    $conn->{newtime} = time;
    # get elapsed time
    my $secs = $conn->{newtime} - $conn->{oldtime};
    # update waittime
    $conn->{waittime} += $secs;
    # get waittime
    my $waittime = $conn->{waittime};

    # get conn vars
    my $chatmode = $conn->{chatmode};
    my $lastnick = $conn->{lastnick};
    my $status = $conn->{status};
    if ($debug == 1) { print("handle_eliza: chatmode: $chatmode, lastnick: $lastnick, status: $status\n"); }

    # only continue if not in chatmode
    if ($chatmode == 0) {
        # if status is 0 (normal), check if activity delay has passed
        if ($status == 0 && $waittime >= $activity_delay) {
            if ($debug == 1) { print("handle_eliza: setting status to 1 (no activity)\n"); }
            # set status to "no activity"
            $conn->{status} = 1;
            # clear waittime
            $conn->{waittime} = 0;
            # clear lastnick
            $conn->{lastnick} = "";
        }
        # if status is 1 (no activity) and one person has spoken, check if
        # response delay has passed
        elsif ($status == 1 && $lastnick ne "" && $waittime >= $response_delay) {
            if ($debug == 1) { print("handle_eliza: turning on chatmode\n"); }
            # turn on chatmode
            $conn->{chatmode} = 1;
            # call bot with last to and last message
            if ($debug == 1) { print("handle_eliza: calling bot\n"); }
            call_bot($conn, $conn->{lastto}, $conn->{lastmsg})
        }
    }
}

# while forever, handle eliza check, then do an irc loop
while (1) {
    handle_eliza($conn);
    $irc->do_one_loop();
}

#===============================================================================
# End of File
#===============================================================================
