#!/usr/bin/env ruby
#===============================================================================
# get-locals
#
# Get posts from Locals sites.
#
# Dependencies: nokogiri
#
# Site: https://locals.com
#
# Create configuration file ~/.locals with one or more SITE sections like:
#
# # Lunduke
# lunduke.title = Lunduke Locals
# lunduke.url = https://lunduke.locals.com
# lunduke.dir = ${HOME}/Lunduke Locals
# lunduke.username = USERNAME
# lunduke.password = PASSWORD
#
# # Nerdy Entertainment
# nerdy_entertainment.title = Nerdy Entertainment
# nerdy_entertainment.url = https://nerdyentertainment.locals.com
# nerdy_entertainment.dir = ${HOME}/Nerdy Entertainment
# nerdy_entertainment.username = USERNAME
# nerdy_entertainment.password = PASSWORD
#
# Then call this script with either 'lunduke' or 'nerdy_entertainment' as the
# SITE parameter to fetch.
#
# Author: Kyle W T Sherman <kylewsherman@gmail.com>
#===============================================================================

# set verbose mode
$VERBOSE = true;

# requires
require 'rubygems'
require 'fileutils'
require 'tempfile'
require 'net/http'
require 'open-uri'
require 'nokogiri'
require 'cgi/escape'

$config_file = "#{Dir.home}/.locals"
$html_header = '<!DOCTYPE html>' + "\n" + '<html xmlns="http://www.w3.org/1999/xhtml" lang="en">'
$user_agent = 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)';

# image attributes
# set width, but let height auto-size to preserve aspect ratio
$img_attrs = 'width="1024"'
$iframe_attrs = $img_attrs + ' height="768"'

# parameters
$basename = File.basename(__FILE__)
$arg_h = '-h'
$arg_help = '--help'
$arg_m = '-m'
$arg_missing = '--missing'
$arg_a = '-a'
$arg_all = '--all'
$arg_C = '-C'
$arg_continue = '--continue'
$arg_c = '-c'
$arg_count = '--count'

# default parameter values
$site = nil
$type = $arg_missing
$count = nil
$start_id = nil

puts ARGV

# parse parameters
if !ARGV[0].nil? and ARGV[0] != ''
  case ARGV[0]
  when $arg_h, $arg_help
    $type = $arg_help
  else
    $site = ARGV[0]
  end
end
if !ARGV[1].nil? and ARGV[1] != ''
  case ARGV[1]
  when $arg_m, $arg_missing
    $type = $arg_missing
  when $arg_a, $arg_all
    $type = $arg_all
  when $arg_C, $arg_continue
    if ARGV[2].nil? or ARGV[2].to_i < 1
      $type = $arg_help
    else
      $type = $arg_continue
      $start_id = ARGV[2]
    end
  when $arg_c, $arg_count
    if ARGV[2].nil? or ARGV[2].to_i < 1
      $type = $arg_help
    else
      $type = $arg_count
      $count = ARGV[2].to_i
    end
  else
    $type = $arg_help
  end
end

# display usage
if $type == $arg_help or $site.nil?
  puts <<-EOF
Usage: #{$basename} SITE [OPTION]
Fetch posts from Locals.
Options:
  -h, --help        = This usage text
  -m, --missing     = Fetch all missing posts [default]
  -a, --all         = Fetch all posts, even if previously fetched
  -C, --continue ID = Continue fetching from previous run, starting at ID
  -c, --count COUNT = Fetch COUNT number of posts
  -r, --rss COUNT   = Fetch COUNT number of posts and generate an RSS feed
EOF
  if File.exist?($config_file) then
    puts "Sites:"
    open($config_file).grep(/^.*\.title *= */).each do |site|
      puts "  #{site.sub(/\.title *= .*$/, '')}"
    end
  else
    puts "Missing configuration file: #{$config_file}"
    puts "See script header for examples"
  end
  exit 1
end

def get_config(site, tag)
  result = open($config_file).grep(/^#{site}\.#{tag} *= */)[0]
  if result.nil? then
    raise "Site [#{site}] tag [#{tag}] not found in configuration file [#{$config_file}]"
  else
    return result.chomp.sub(/^#{site}\.#{tag} *= */, '')
  end
end

$base_url = get_config($site, 'url')
$auth_url = "#{$base_url}/login"
$member_url = "#{$base_url}/member"
$posts_dir = get_config($site, 'dir')
$css_file = "#{$posts_dir}/css.css"
# TODO: change this to a temp file
$cookie_file = "#{Dir.home}/.locals-cookies"
$username = get_config($site, 'username')
$password = get_config($site, 'password')
$title = get_config($site, 'title')

puts("base_url: #{$base_url}")
puts("posts_dir: #{$posts_dir}")
puts("username: #{$username}")
#puts("password: #{$password}")
puts("title: #{$title}")
puts("type: #{$type}")
puts("count: #{$count}")
puts("start_id: #{$start_id}")

system('mkdir', '-p', $posts_dir)
#$post_list_file = Tempfile.new('post_list_file')
$post_list_file = "#{$posts_dir}/post_list_file"

def save_cookies(cookies)
  file = File.open($cookie_file, 'w')
  File.chmod(0600, file)
  cookies.each do |cookie|
    file.puts(cookie.split('; ')[0])
  end
  file.close
end

def load_cookies()
  cookies = Array.new
  File.open($cookie_file, 'r').each do |line|
    cookies.push(line.chomp)
  end
  return cookies.join('; ')
end

def login()
  if !File.exist?($cookie_file) then
    puts('Logging in...')
    response = Net::HTTP.post_form(URI($auth_url), 'username' => $username, 'password' => $password)
    if response.is_a?(Net::HTTPSuccess) then
      puts('Successful login')
      save_cookies(response.get_fields('set-cookie'))
    else
      puts('Error logging in')
      if File.exist?($cookie_file) then
        File.delete($cookie_file)
      end
      exit 1
    end
  end
end

def line_count(file)
  lines = 0
  File.open(file, 'r').each do
    lines += 1
  end
  return lines
end

def trim_file(file, line_count)
  temp_file = Tempfile.new('temp_file')
  temp = File.open(temp_file, 'w')
  c = 0
  File.open(file, 'r').each do |line|
    if c < line_count then
      temp.puts(line)
      c += 1
    end
  end
  temp.close
  FileUtils.copy(temp_file, file)
  temp_file.unlink
end

def fetch_post_urls()
  url = "#{$base_url}/newsfeed"
  #url = "#{$base_url}/newsfeed?page=3&lpid=4184409"
  cookies = load_cookies()
  file = File.open($post_list_file, 'w') {}
  # TODO: Add support for $count = 'all' and $count = 'missing'
  while !url.empty? && line_count($post_list_file) < $count do
    puts("URL: #{url}")
    file = File.open($post_list_file, 'a')
    #sleep(10)                            # prevent 429 Too Many Requests error
    doc = Nokogiri::HTML(URI.open(url, 'User-Agent' => $user_agent, 'Cookie' => cookies))
    doc.xpath("//div/@data-post-url").each do |link|
      puts("Link: #{link.content}")
      file.puts(link.content)
    end
    doc.css("[class='prevnext']/a").each do |link|
      if link.content == 'Next' then
        url = $base_url + link['href']
        puts("Next URL: #{url}")
      end
    end
    file.close
  end
  if $count.is_a? Integer then
    trim_file($post_list_file, $count)
  end
end

def date_to_iso(date)
  begin
    iso_date = Date.strptime(date, '%b %d, %Y').to_s
  rescue Date::Error
    iso_date = DateTime.now.to_date.to_s
  end
  return iso_date
end

def clean_content(content)
  result = Array.new
  content = content.gsub(/<div.*[^>]>/, '').gsub(/<\/div>/, '')
  content.each_line do |line|
    new_line = line.strip
    unless new_line.empty?
      result.push(new_line)
    end
  end
  content = result.join("\n")
  content.gsub!(/#{$base_url}\/post\//, 'https://../') # FIXME
  content.gsub!(/<a href="\/tag\/[^"]*"[^>]*><\/a>/, '')
  content.gsub!(/<a .*href="([^"]*)"[^>]*>/, '<a href="\1">')
  content.gsub!(/<img .*src="([^"]*)"[^>]*>/, '<img src="\1" />')
  #content.gsub!(/<a class="tagged" /, '<a ')
  content.gsub!(/<span [^>]*>/, '')
  content.gsub!(/<\/span>/, '')
  return content
end

def clean_title(title)
  if title.include?(' - ') then
    title = title.strip.gsub(/\r/, ' ').gsub(/\n/, ' ').gsub(/  /, ' ').gsub(/ *-.* Community$/, '').gsub(/youtu\.be.*$/, '') # FIXME
    title = CGI.escapeHTML(title)
  else
    title = ''
  end
  if title.empty? then
    title = "[No Title]"
  end
  return title
end

def fetch_image(anchor, id, cookies)
  url = anchor['href']
  if url.match?(/https:\/\/(cdn|media2).locals.com\/images\//) then
    if !url.match?(/https:\/\/(cdn|media2).locals.com\/images\/[^\/]*\/originals\//) then
      url = url.gsub(/(https:\/\/(cdn|media2).locals.com\/images\/[^\/]*\/)/, '\1originals/')
    end
    url = url.gsub(/_full\./, '.').gsub(/_custom\./, '.')
    name = url.gsub(/^.*\//, '')
    file_name = "#{$posts_dir}/#{id}/#{name}"
    if !File.exist?(file_name) then
      puts("Image URL: #{url}")
      URI.open(url, 'Cookie' => cookies) do |image|
        File.open(file_name, "wb") do |file|
          file.write(image.read)
        end
      end
    end
    return name
  end
  return nil
end

# TODO: Change how images work. Add all divs under post div so images stay in
# their correct place. Then parse them. Also parse out an invalid divs/spans
# found.

def fetch_post_images(cookies, doc, id, content)
  ["class='wcontainer   post'",
   "class='wcontainer   article-preview'"].each do |path|
    doc.css("[#{path}]//a").each do |anchor|
      name = fetch_image(anchor, id, cookies)
      if !name.nil? then
        content = "#{content}\n<p><img src=\"#{name}\" #{$img_attrs} /></p>"
      end
    end
    return content
  end
end

def fetch_comment_images(cookies, block, id, comment)
  block.css("[class='content answer-container']//a").each do |anchor|
    name = fetch_image(anchor, id, cookies)
    if !name.nil? then
      comment = "#{comment}\n<p><img src=\"#{name}\" #{$img_attrs} /></p>"
    end
  end
  return comment
end

def add_iframes(doc, content)
  doc.css("[class='wcontainer   post']//iframe").each do |iframe|
    iframe = iframe.to_s.gsub(/ width="[^"]*"/, '').gsub(/<iframe (.*)><\/iframe>/, '<iframe \1 ' + $iframe_attrs + '></iframe>')
    content = "#{content}\n<p>#{iframe}</p>"
  end
  return content
end

def add_sources(doc, content)
  doc.css("[class='wcontainer   post']//source").each do |source|
    content = "#{content}\n<p>#{source.to_s}</p>"
  end
  return content
end

def fetch_comments(cookies, doc, id)
  comment_list = Array.new
  doc.xpath("//div[@class='js-hiding-block']//div[@class='author']/../..").each do |block|
    date = block.css("[class='info']").first.content.strip
    iso_date = date_to_iso(date)
    if block.xpath(".//div[@class='author']//span[@class='username']/span/span").length > 0 then
      if block.xpath(".//div[@class='author']//span[@class='username']/span/span/span").length > 0 then
        author_name = block.xpath(".//div[@class='author']//span[@class='username']/span/span").first.content.strip
        author_handle = block.xpath(".//div[@class='author']//span[@class='username']/span/span/span").first.content.strip
      else
        author_handle = block.xpath(".//div[@class='author']//span[@class='username']/span").first.content.strip
        author_name = author_handle[1..]
      end
    elsif block.xpath(".//div[@class='author']/a/span").length > 0 then
      if block.xpath(".//div[@class='author']/a/span/span").length > 0 then
        author_name = block.xpath(".//div[@class='author']/a/span").first.content.strip
        author_handle = block.xpath(".//div[@class='author']/a/span/span").first.content.strip
      else
        author_handle = block.xpath(".//div[@class='author']/a/span").first.content.strip
        author_name = author_handle[1..]
      end
    end
    #puts(block.xpath(".//div[@class='author']").to_s) if block.xpath(".//div[@class='author']/a/span/span").first.nil?
    author = "<div class=\"author\"><h3><a href=\"#{$member_url}/#{author_handle[1..]}\">#{author_name}</a></h3></div>"
    author = "#{author}\n<div class=\"date\"><h3>#{iso_date}</h3></div>"
    author = "#{author}\n<div class=\"clear\"></div>"
    comment = clean_content(block.css("[class='content answer-container']//div[class='answer-content']/div").first.to_s)
    if !comment.empty? then
      comment = "<div class=\"comment\">\n<hr />\n#{author}\n#{comment}\n</div>"
    else
      comment = clean_content(block.css("[class='cat_block_vote']/span").first.to_s)
      comment = "<div class=\"reply\">\n<hr />\n#{author}\n#{comment}\n</div>"
    end
    comment = fetch_comment_images(cookies, block, id, comment)
    comment_list.push(comment)
  end
  return comment_list
end

def generate_post(post_file, url, id, date, author_name, author_handle, title, content, comment_list)
  iso_date = date_to_iso(date)
  File.open(post_file, 'w') { |file|
    file.puts($html_header)
    file.puts("<!-- url: #{url} -->")
    file.puts("<!-- id: #{id} -->")
    file.puts("<!-- date: #{date} -->")
    file.puts("<!-- iso_date: #{iso_date} -->")
    file.puts("<!-- author_name: #{author_name} -->")
    file.puts("<!-- author_handle: #{author_handle} -->")
    file.puts("<!-- title: #{title} -->")
    file.puts('<head>')
    file.puts("<title>#{title}</title>")
    file.puts('<link rel="stylesheet" type="text/css" media="all" href="../css.css" />')
    file.puts('</head>')
    file.puts('<body>')
    file.puts('<div id="container">')
    file.puts("<h1><a href=\"#{url}\">#{title}</a></h1>")
    file.puts("<div class=\"author\"><h2><a href=\"#{$member_url}/#{author_handle[1..]}\">#{author_name}</a></h2></div>")
    file.puts("<div class=\"date\"><h2>#{iso_date}</h2></div>")
    file.puts('<div class="clear"></div>')
    file.puts(content)
    for comment in comment_list do
      file.puts(comment)
    end
    file.puts('</div>')
    file.puts('</body>')
    file.puts('</html>')
  }
end

def fetch_posts()
  cookies = load_cookies()
  File.open($post_list_file, 'r').each do |url|
    url.chomp!

    # skip until start, if continuing
    url_id = url.sub(/^.*\/([^\/]*)\/[^\/]*$/, '\1')
    if $type == $arg_continue then
      if $start_id != url_id then
        next
      else
        $type = $arg_all
      end
    end

    post_name = url.sub(/^.*\/([^\/]*)$/, '\1')
    #sleep(10)                            # prevent 429 Too Many Requests error
    puts("URL: #{url}")
    doc = Nokogiri::HTML(URI.open(url, 'User-Agent' => $user_agent, 'Cookie' => cookies))
    id = doc.xpath("//div/@data-id").first.content.strip

    puts("Post ID: #{id}, URL: #{url}")
    date = doc.css("[class='info']").first.content.strip
    if doc.xpath("//span[@class='username']/a/span//span/span").length > 0 then
      author_name = doc.xpath("//span[@class='username']/a/span/span").first.content.strip
      author_handle = doc.xpath("//span[@class='username']/a/span//span/span").first.content.strip
    else
      author_handle = doc.xpath("//span[@class='username']/a/span").first.content.strip
      author_name = author_handle[1..]
    end
    title = clean_title(doc.title)
    content = doc.css("[class='wcontainer   post']//div[class='content    ']/div/div").first.to_s
    if content.nil? or content.empty? then
      block = doc.css("[class='wcontainer   article-preview']//div[class='content']")
      content = block.xpath('a').first.to_s +
                block.css("div[class='mce-content-body article-body-font-work-sans']").first.to_s
    end
    content = clean_content(content)

    system('mkdir', '-p', "#{$posts_dir}/#{id}")

    content = fetch_post_images(cookies, doc, id, content)
    content = add_iframes(doc, content)
    content = add_sources(doc, content)
    comment_list = fetch_comments(cookies, doc, id)

    #puts("url: #{url}")
    #puts("id: #{id}")
    #puts("date: #{date}")
    #puts("author_name: #{author_name}")
    #puts("author_handle: #{author_handle}")
    #puts("title: #{title}")
    #puts("\ncontent: #{content}")
    #puts("\ncomments: " + comment_list.join("\n-----\n"))
    post_file = "#{$posts_dir}/#{id}/#{post_name}.html"
    generate_post(post_file, url, id, date, author_name, author_handle, title, content, comment_list)
  end
end

def generate_index(title)
  File.open("#{$posts_dir}/index.html", 'w') { |index|
    index.puts($html_header)
    index.puts('<head>')
    index.puts('  <title>' + title + '</title>')
    index.puts('<link rel="stylesheet" type="text/css" media="all" href="css.css" />')
    index.puts('</head>')
    index.puts('<body>')
    index.puts('  <div id="container">')
    index.puts('    <h1>' + title + '</h1>')
    index.puts('    <table>')
    index.puts('      <tr><th>Post</th><th>Author</th><th>Date</th></tr>')
    Dir.glob("#{$posts_dir}/*/*.html").reverse.each do |file|
      puts("File: #{file}")
      title = File.open(file, 'r').grep(/^<!-- title: .* -->$/).first.strip.sub(/^<!-- title: (.*) -->$/, '\1')
      author_name = File.open(file, 'r').grep(/^<!-- author_name: .* -->$/).first.strip.sub(/^<!-- author_name: (.*) -->$/, '\1')
      author_handle = File.open(file, 'r').grep(/^<!-- author_handle: .* -->$/).first.strip.sub(/^<!-- author_handle: (.*) -->$/, '\1')
      iso_date = File.open(file, 'r').grep(/^<!-- iso_date: .* -->$/).first.strip.sub(/^<!-- iso_date: (.*) -->$/, '\1')
      index.puts('      <tr><td><a href="' + file + '">' + title + '</a></td><td><a href="' + $member_url + '/' + author_handle[1..] + '">' + author_name + '</a></td><td>' + iso_date + '</td></tr>')
    end
    index.puts('    </table>')
    index.puts('  </div>')
    index.puts('</body>')
    index.puts('</html>')
  }
end

def make_css_file(css_file = $css_file)
  File.open(css_file, 'w') { |file|
    file.puts <<-EOF
:root {
    --background: #202020;
    --background-accent: #181818;
    --primary: #D0D0D0;
    --secondary: #B0B0B0;
    --accent: #F0F0F0;
    --link: #80B0F0;
    --link-hover: #A0D0FF;
    --header: #80B0F0;
    --header-hover: #80B0F0;
    --header-accent: #70A0E0;
    --header-link: #80B0F0;
    --header-link-hover: #A0D0FF;
    --menu-item-highlight: #204060;
    --border: #70B0E0;
}

html {
    font-family: Menlo, "Bitstream Vera Sans Mono", "DejaVu Sans Mono", DroidSansMono, Monaco, "Lucida Console", Consolas, "Liberation Mono", sans;
    padding: 0;
}

body {
    background-color: var(--background);
    color: var(--primary);
    min-height: 100%;
    padding: 0;
}

a:link, a:visited {
    color: var(--link);
    text-decoration: none;
}
a:hover, a:active {
    color: var(--link-hover);
    text-decoration: underline;
}

/* hide mouseover links */
div#hover a img {
    height: 0;
    width: 0;
    border-width: 0;
}

/* show links on mouseover */
div#hover a:hover img {
    left: 100px;
    height: 310px;
    position: relative;
    top: 20px;
    width: 223px;
}

img {
    border: 0;
    height: auto;
    max-width: 97%; /* probably should be 100%, but that does not line up right */
    padding: 1em;
    width: auto;
}

hr {
    border: 1px dashed;
    color: var(--border);
    margin: 2em 1em;
    padding: 0;
}

blockquote {
    font-style: italic;
    margin: 1em 2em;
}

p {
    margin: 0 1em;
    padding: 0.5em 0;
    text-align: justify;
}

h1 {
    color: var(--header);
    font-size: 1.2em;
    font-weight: bold;
    letter-spacing: .1em;
    margin: 0 1em;
    padding-bottom: 1em;
}
h1 a:link, h1 a:visited {
    color: var(--header);
}
h1 a:hover, h1 a:active {
    color: var(--header-hover);
}

h2 {
    color: var(--header);
    font-size: 1.1em;
    font-weight: bold;
    letter-spacing: .05em;
    margin: 0 1em;
    padding-bottom: 1em;
}
h2 a:link, h2 a:visited {
    color: var(--header);
}
h2 a:hover, h2 a:active {
    color: var(--header-hover);
}

h3 {
    color: var(--header);
    font-size: 1em;
    font-style: italic;
    letter-spacing: 0;
    margin: 0 1em;
    padding-bottom: 1em;
}
h3 a:link, h3 a:visited {
    color: var(--header);
}
h3 a:hover, h3 a:active {
    color: var(--header-hover);
}

strong {
    font-weight: bold;
}

em {
    font-style: italic;
}

code {
    background-color: var(--background-accent);
    color: var(--accent);
    font-family: monospace;
    font-size: 12pt;
    white-space: pre;
}

textarea {
    background-color: var(--background-accent);
    border: 1px solid var(--border);
    color: var(--accent);
    font-family: monospace;
    font-size: 1.1em;
    margin: 0 1em;
    overflow: auto;
    padding: .2em;
    width: 97%;
}

ul {
    list-style-type: square;
    margin: .5em 0 .5em .5em;
}

ol {
    margin: .5em 0 .5em 0;
}

li {
    margin: .5em 0 .5em 0;
}

dl {
    text-align: justify;
}

dt {
    font-weight: bold;
    margin: .5em 0 .5em .5em;
}

dd {
    margin: .5em 0 .5em 2em;
}

dd p {
    margin: .5em 0 .5em 0;
}

table {
    border: 0 none;
    margin: 0 1em;
}
thead {
    border: 0 none;
}
tbody {
    border: 0 none;
}
th {
    border: 0 none;
    padding: 0;
    text-align: left;
}
tr {
    border: 0 none;
    padding: 0;
}
td {
    vertical-align: top;
    border: 0 none;
    padding: 0 1em 0 0;
}

#container {
    margin: 0 2em;
}

.author {
    color: var(--header);
    float: left;
    font-size: 1em;
    font-style: italic;
    letter-spacing: 0;
}
.author a:link, author a:visited {
    color: var(--header);
}
.author a:hover, author a:active {
    color: var(--header-hover);
}

.date {
    color: var(--header);
    float: right;
    font-size: 1em;
    font-style: italic;
    letter-spacing: 0;
    text-align: right;
}

.comment {}

.reply {
    margin-left: 4em;
}

.clear {
    clear: both;
}
EOF
  }
end

login()
#load_cookies()
make_css_file()
if $type != $arg_continue then
  puts("\nFetching Post URL's...")
  fetch_post_urls()
end
puts("\nFetching Posts...")
fetch_posts()
puts("\nGenerating Index...")
generate_index($title)

#File.delete($post_list_file)
#File.delete($cookie_file)

#===============================================================================
# End of File
#===============================================================================
