#!/usr/bin/env perl
#===============================================================================
# irc-chat-bot
#
# Run an irc chat bot that responds using elizatalk and performs various other
# actions.
#
# Author: Kyle W T Sherman
#===============================================================================

BEGIN { $^W = 1; }

use strict;
use warnings;

use Getopt::Long;
use POE qw(Component::IRC);
use Data::Dumper;

my ($server, $help, $port, @channels, $nick, $ircname, $username);

Getopt::Long::Configure('bundling');
GetOptions('h|help' => \$help,
           's|server:s' => \$server,
           'p|port:i' => \$port,
           'c|channel:s' => \@channels,
           'n|nick:s' => \$nick,
           'i|ircname:s' => \$ircname,
           'u|username:s' => \$username);

# allow for comma seperated channels
@channels = split(/,/, join(',', @channels));

# set server if passed in without option word
if (!defined($server) && defined($ARGV[0])) {
    $server = $ARGV[0];
}

# set help if no server is given
if (!defined($server)) {
    $help = 1;
}

# set default values for parameters not given
if (!defined($port)) { $port = 6667; }
if (!@channels) { @channels = ('#test'); }
if (!defined($nick)) { $nick = 'chat'; }
if (!defined($ircname)) { $ircname = $nick; }
if (!defined($username)) { $username = $nick; }

# print usage
if (defined($help)) {
    print("Usage: irc-chat-bot [OPTION]... [-s|--server] SERVER\n");
    print("Start an irc chat bot on SERVER.\n");
    print("  -h, --help      help\n");
    print("  -s, --server    irc server address\n");
    print("  -p, --port      server port (defaults to 6667)\n");
    print("  -c, --channel   channel to join (defaults to `#test')\n");
    print("                    this option may be used multiple times\n");
    print("                    you can also seperate channels with commas\n");
    print("  -n, --nick      nick (defaults to `chat')\n");
    print("  -i, --ircname   irc name (defaults to `chat')\n");
    print("  -u, --username  username (defaults to `chat')\n");
    exit;
}

# create irc object and connection
my $irc = POE::Component::IRC->spawn(
    server      => $server,
    port        => $port,
    nick        => $nick,
    ircname     => $ircname,
    username    => $username
) or die("ERROR: Could not start irc client");

# create session
POE::Session->create(
    package_states => [
        'main' => [qw(_default _start irc_001 irc_public)],
    ],
    heap => { irc => $irc },
) or die("ERROR: Could not create POE session");

# start irc client
$poe_kernel->run();
exit(0);

# _start (connect)
sub _start {
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    # get the session id of the component from the object
    # and register and connect to the specified server
    my $irc_session = $heap->{irc}->session_id();
    $kernel->post($irc_session => register => 'all');
    $kernel->post($irc_session => connect => { });
    undef;
}

# irc_001 (join)
sub irc_001 {
    my ($kernel, $sender) = @_[KERNEL, SENDER];

    # get the component's object by accessing the heap of the SENDER
    my $poco_object = $sender->get_heap();
    print("Connected to ", $poco_object->server_name(), "\n");

    print(Dumper(@channels));
    # in any irc_* events SENDER will be the PoCo-IRC session
    foreach my $channel (@channels) {
        print(Dumper($channel));
        $kernel->post($sender => join => $channel);
    }
    undef;
}

# irc_public (public sends)
sub irc_public {
    my ($kernel,$sender,$who,$where,$what) = @_[KERNEL,SENDER,ARG0,ARG1,ARG2];
    my $nick = (split /!/, $who)[0];
    my $channel = $where->[0];

    if (my ($rot13) = $what =~ /^rot13 (.+)/) {
        $rot13 =~ tr[a-zA-Z][n-za-mN-ZA-M];
        $kernel->post($sender => privmsg => $channel => "$nick: $rot13");
    }
    undef;
}

  # We registered for all events, this will produce some debug info.
sub _default {
    my ($event, $args) = @_[ARG0 .. $#_];
    my @output = ("$event: ");

    foreach my $arg (@$args) {
        if (ref($arg) eq 'ARRAY') {
            push(@output, "[" . join(" ,", @$arg) . "]");
        } else {
            push (@output, "'$arg'");
        }
    }
    print STDOUT join ' ', @output, "\n";
    return 0;
}


# # set channel to connect to
# $conn->{channel} = $channel;

# # on_connect
# sub on_connect {
#     # shift in connection object that is passed automatically
#     my $conn = shift;
#     print(Dumper($conn));

#     # join channel and greet it
#     $conn->join($conn->{channel});
#     $conn->privmsg($conn->{channel}, "Hello, chat bot here");
#     $conn->{connected} = 1;
# }

# # on_join
# sub on_join {
#     # get connection object and the event object, that are passed automatically
#     my ($conn, $event) = @_;
#     print(Dumper($event));

#     # get nick that just joined
#     my $nick = $event->{nick};

#     # say hello to the nick in public
#     $conn->privmsg($conn->{channel}, "Hello, $nick!");
# }

# # on_part
# sub on_part {
#     # get connection object and the event object, that are passed automatically
#     my ($conn, $event) = @_;
#     print(Dumper($event));

#     # get nick that just joined
#     my $nick = $event->{nick};

#     # say goodbye to the nick in public
#     $conn->privmsg($conn->{channel}, "Goodbye, $nick!");
# }

# # dumper
# sub dumper {
#     # get connection object and the event object, that are passed automatically
#     my ($conn, $event) = @_;

#     print(Dumper($event));
# }

# # event handlers
# $conn->add_handler('endofmotd', \&on_connect);
# $conn->add_handler('join', \&on_join);
# $conn->add_handler('part', \&on_part);
# $conn->add_handler('cping', \&dumper);

# # start irc client
# $irc->start();

#===============================================================================
# End of File
#===============================================================================
