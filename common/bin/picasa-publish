#!/usr/bin/env perl
#===============================================================================
# picasa-publish
#
# Publish pictures to picasa.
#
# Create sets from directory names and upload pictures inside of them.
#
# Scan the directory and picture file names for a date and keywords to use
# as tags.
#
# picasa-publish-tags should be in the conf directory and contain valid tags
# (one per line).
#
# picasa-publish-nontags should be in the conf directory and contain words to
# ignore.
#
# Parameters:
#   path - path to upload (defaults to .)
#
# Set DEBUG=1 before calling for debug output.
#
# Author: Kyle W T Sherman
#===============================================================================

BEGIN { $^W = 1; }

use strict;
use warnings;

use Data::Dumper;

# set config vars
my $confdir = $ENV{HOME} . '/.picasa-publish';
my $conftags = 'picasa-publish-tags';
my $confnontags = 'picasa-publish-nontags';

# vars
# my $request;
# my $response;
# my $token;
my $tag;

# usage
if ($#ARGV >= 0 && ($ARGV[0] eq '-h' || $ARGV[0] eq '--help')) {
    print("Usage: picasa-publish [PATH]\n");
    print("Publish pictures in PATH to picasa service.\n");
    print("  PATH  (defaults to current directory)\n");
    exit;
}

# set debug state
my $debug = 0;
if (defined($ENV{DEBUG}) && $ENV{DEBUG} == 1) { $debug = 1; }

# create config dir
if (opendir(DIR, $confdir)) {
    closedir(DIR);
} else {
    system('/bin/mkdir', $confdir) or die("Failed to create \'$confdir\' directory\n");
    system('/bin/chmod', '700', $confdir) or die("Failed to set permissions on \'$confdir\' directory");
}

# path defaults to current directory
my $path = '.';
if ($#ARGV >= 0) { $path = $ARGV[0]; }

# convert "." into full directory path
if ($path eq ".") { $path = $ENV{PWD}; }

# load tag and nontag files into lists
my @taglist = ();
my @nontaglist = ();
my $tagfile = $confdir . '/' . $conftags;
my $nontagfile = $confdir . '/' . $confnontags;
if (open(TAGFILE, "<$tagfile")) {
    foreach $tag (<TAGFILE>) {
        chomp($tag);
        push(@taglist, $tag);
    }
    close(TAGFILE);
}
if (open(TAGFILE, "<$nontagfile")) {
    foreach $tag (<TAGFILE>) {
        chomp($tag);
        push(@nontaglist, $tag);
    }
    close(TAGFILE);
}
# set strings of all the tags
my $tagstr = ' ' . join(' ', @taglist) . ' ';
my $nontagstr = ' ' . join(' ', @nontaglist) . ' ';
my $alltagstr = $tagstr . $nontagstr;
$alltagstr =~ s/  / /g;
# load multi-word tag list and string
my @multiwordtaglist = ();
foreach $tag (@taglist) {
    if ($tag =~ m/_/) {
        my $mwtag = $tag;
        $mwtag =~ s/_/ /g;
        push(@multiwordtaglist, $mwtag);
    }
}
foreach $tag (@nontaglist) {
    if ($tag =~ m/_/) {
        my $mwtag = $tag;
        $mwtag =~ s/_/ /g;
        push(@multiwordtaglist, $mwtag);
    }
}
#my $multiwordtagstr = '|' . join('|', @multiwordtaglist) . '|';

# output tags and nontags lists and strings
if ($debug) {
    print("Tag List:\n");
    print(Dumper(@taglist));
    print("Tag String:\n");
    print("$tagstr\n");
    print("NonTag List:\n");
    print(Dumper(@nontaglist));
    print("NonTag String:\n");
    print("$nontagstr\n");
    print("MultiWordTag List:\n");
    print(Dumper(@multiwordtaglist));
    print("AllTag String:\n");
    print("$alltagstr\n");
#    print("MultiWordTag String:\n");
#    print("$multiwordtagstr\n");
}

# use the directory name as the set name
my $set = '';
if (opendir(DIR, "$path")) {
    closedir(DIR);
    # get set name
    $set = $path;
    # remove any trailing /
    $set =~ s%/+$%%;
    # remove path part
    $set =~ s%.*/(.*)%$1%;
    # output set name
    #print("Set: $set\n");
}

# list of missing tags
my @missingtaglist = ();

# start scanning from $path
print("Set: $set \n");
my $tags = &GetTags($set, ' ', 'tags');

# spacer
if ($debug) {
    print("--------------------------------------------------------------------------------\n");
}

# first scan is a test (and looks for missing tags)
my $mtags = &GetTags($set, ' ', 'missingtags');
$mtags .= &ScanDir($path, ' ', $set, 'test');
$mtags = &TrimStr($mtags);

# if no missing tags, then upload for real
if ($mtags eq '') {
    # create set
    &CreateSet($set);
    # upload all images
    &ScanDir($path, $tags, $set, 'upload');
} else {
    print("Missing tags:\n");
    foreach $tag (sort(split(' ', $mtags))) {
        print("$tag\n");
    }
}

#===============================================================================
# GetTags
# convert a string into tags
# parameters: string, mode (tags, nontags, missingtags)
#===============================================================================

sub GetTags {
    my ($str, $tags, $mode) = @_;
    my $tag;

    # remove date, except for year
    $str =~ s/^([\d-]+ )[\d\.]+ /$1/;
    $str =~ s/^(\d\d\d\d)[\d-]* /$1 /;
    # remove extension
    $str =~ s/\.(jpg|jpeg|gif|png|bmp|tif|txt)$//;
    # remove ending picture number (#)
    $str =~ s/ \(\d+\)$//;
    # remove 's
    $str =~ s/\'s / /g;
    # remove non alpha-numberic characters
    $str =~ s/[^A-Za-z0-9 ]//g;
    # lower case
    $str = lc($str);
    # add spaces to the ends
    $str = ' ' . $str . ' ';
    # remove double spaces
    $str =~ s/  / /g;

    # replace state abbreviations with full name
    $str =~ s/ ca / california /g;
    $str =~ s/ mn / minnesota /g;

    # other replacements
    $str =~ s/ richard / dick /g;

    # merge words that make up mutli-word tags
    foreach my $mwtag (@multiwordtaglist) {
        if ($str =~ m/ $mwtag /) {
            my $newtag = $mwtag;
            $newtag =~ s/ /_/g;
            $str =~ s/ $mwtag / $newtag /g;
            # add single words to the string if they exist in tags
            foreach $tag (split(' ', $mwtag)) {
                if ($tagstr =~ m/ $tag /) { $str .= $tag . ' '; }
            }
        }
    }

    if ($mode eq 'tags') {
        # loop though valid tags and match against string
        foreach $tag (@taglist) {
            if ($str =~ m/ $tag / && !($tags =~ m/ $tag /)) { $tags .= $tag . ' '; }
        }
    } elsif ($mode eq 'nontags') {
        # loop though non-tags and match against string
        foreach $tag (@nontaglist) {
            if ($str =~ m/ $tag / && !($tags =~ m/ $tag /)) { $tags .= $tag . ' '; }
        }
    } elsif ($mode eq 'missingtags') {
        # loop though string and track non-matches
        foreach $tag (split(' ', $str)) {
            if (!($alltagstr =~ m/ $tag /) && !($tags =~ m/ $tag /)) { $tags .= $tag . ' '; }
        }
    }

    # output tags
    if ($debug) {
        print("Mode: $mode\n");
        print("String: $str\n");
        print("Tags: $tags\n");
    }

    return($tags);
}

#===============================================================================
# ScanDir
# traverses directories adding text to key words and uploading images
# parameters: path, tags, set, mode (test, upload)
#===============================================================================

sub ScanDir {
    my ($path, $tags, $set, $mode) = @_;
    my $alltags = $tags;

    # if $path is a directory
    if (opendir(DIR, "$path")) {
        # get files
        my @files = sort(grep(!/^\.\.?$/, readdir(DIR)));
        closedir(DIR);
        # recursively call this procedure for every file/directory
        foreach my $file (@files) {
            # add new tags
            my $newtags;
            if ($mode eq 'test') {
                $newtags = &GetTags($file, $tags, 'missingtags');
                $alltags = &GetTags($file, $alltags, 'missingtags');
            } else {
                $newtags = &GetTags($file, $tags, 'tags');
                $alltags = &GetTags($file, $alltags, 'tags');
            }
            # recursively call this procedure
            if ($mode eq 'test') {
                $alltags = &ScanDir($path . '/' . $file, $alltags, $set, $mode);
            } else {
                &ScanDir($path . '/' . $file, $newtags, $set, $mode);
            }
        }
    }

    # if $path is an image, then upload and tag it
    elsif ($path =~ m/\.(jpg|jpeg|gif|png|bmp)$/) {

        # get title
        my $title = $path;
        $title =~ s/^.*\/([^\/]+)$/$1/;
        $title =~ s/\.[^\.]*$//;

        # get description from text comment file, if one exists
        my $textfile = $path;
        $textfile =~ s/\.[^\.]*$/\.txt/;
        my $text = '';
        if (open(TEXT, "<$textfile")) {
            $text = <TEXT>;
            close(TEXT);
        }

        # create summary from title and text
        my $summary = $title;
        if (length($text) > 0) {
            $summary .= "\n" . $text;
        }

        # trim tags
        $tags = &TrimStr($tags);
        # convert tags to comma seperated list
        $tags = join(',', split(' ', $tags));


        # set date
        my $date = $title;
        if ($title =~ m/^\d\d\d\d-\d\d-\d\d \d\d\.\d\d\.\d\d /) {
            $date =~ s/^(\d\d\d\d-\d\d-\d\d \d\d\.\d\d\.\d\d) .*$/$1/;
        } elsif ($title =~ m/^\d\d\d\d-\d\d-\d\d \d\d\.\d\d /) {
            $date =~ s/^(\d\d\d\d-\d\d-\d\d \d\d\.\d\d) .*$/$1/;
        } elsif ($title =~ m/^\d\d\d\d-\d\d-\d\d \d\d /) {
            $date =~ s/^(\d\d\d\d-\d\d-\d\d \d\d) .*$/$1/;
        } elsif ($title =~ m/^\d\d\d\d-\d\d-\d\d /) {
            $date =~ s/^(\d\d\d\d-\d\d-\d\d) .*$/$1/;
        } elsif ($title =~ m/^\d\d\d\d-\d\d /) {
            $date =~ s/^(\d\d\d\d-\d\d) .*$/$1/;
        } elsif ($title =~ m/^\d\d\d\d /) {
            $date =~ s/^(\d\d\d\d) .*$/$1/;
        } else {
            $date = '';
        }

        # test mode
        if ($mode eq 'test') {
            if ($tags ne '') {
                print("File: \'$path\'\n");
                print("Missing tags: $tags\n");
            }
        }

        # upload mode
        if ($mode eq 'upload') {
            # create upload command
            # note: title is the set name and summary is the picture title
            my $cmd = "google picasa post";
            $cmd .= " --title=\"" . EscSet($set) . "\"";
            #$cmd .= " --photo=\"" . EscChars($title) . "\"";
            $cmd .= " --summary=\"" . EscChars($summary) . "\"";
            $cmd .= " --tags=\"" . EscChars($tags) . "\"";
            $cmd .= " --date=\"" . EscChars($date) . "\"";
            $cmd .= " \"" . EscChars($path) . "\"";
            if ($debug) {
                print("Command: " . Dumper($cmd));
            }

            # upload image
            my $response = system($cmd);
            if ($debug) {
                print("Response: " . Dumper($response));
            }
        }

        # output image info
        if ($debug) {
            print("Set: $set\n");
            print("Path: $path\n");
            print("Title: $title\n");
            print("Tags: $tags\n");
            print("Textfile: $textfile\n");
            print("Text: $text\n");
            print("Date: $date\n");
            print("--------------------------------------------------------------------------------\n");
        } elsif ($mode eq 'upload') {
            print("Created title: $title; tags: $tags\n");
        }
    }

    return($alltags);
}

#===============================================================================
# CreateSet
# create photo set and add photo ids to it
# parameters: title
#===============================================================================

sub CreateSet {
    my ($title) = @_;

        # set date
    my $date = $set;
    if ($title =~ m/^\d\d\d\d-\d\d-\d\d \d\d\.\d\d\.\d\d /) {
        $date =~ s/^(\d\d\d\d-\d\d-\d\d \d\d\.\d\d\.\d\d) .*$/$1/;
    } elsif ($title =~ m/^\d\d\d\d-\d\d-\d\d \d\d\.\d\d /) {
        $date =~ s/^(\d\d\d\d-\d\d-\d\d \d\d\.\d\d) .*$/$1/;
    } elsif ($title =~ m/^\d\d\d\d-\d\d-\d\d \d\d /) {
        $date =~ s/^(\d\d\d\d-\d\d-\d\d \d\d) .*$/$1/;
    } elsif ($title =~ m/^\d\d\d\d-\d\d-\d\d /) {
        $date =~ s/^(\d\d\d\d-\d\d-\d\d) .*$/$1/;
    } elsif ($title =~ m/^\d\d\d\d-\d\d /) {
        $date =~ s/^(\d\d\d\d-\d\d) .*$/$1/;
    } elsif ($title =~ m/^\d\d\d\d /) {
        $date =~ s/^(\d\d\d\d) .*$/$1/;
    } else {
        $date = '';
    }

    # create the set
    # TODO: add description option from .txt file
    my $cmd = "google picasa create";
    $cmd .= " --title=\"" . EscChars($title) . "\"";
    $cmd .= " --date=\"" . EscChars($date) . "\"";
    if ($debug) {
        print("Command: " . Dumper($cmd));
    }
    my $response = system($cmd);
    if ($debug) {
        print("Response: " . Dumper($response));
    }
    print("Created set: $title; date: $date\n");
}

#===============================================================================
# TrimStr
# trims whitespace from the ends of a string
# parameters: str
#===============================================================================

sub TrimStr {
    my $str = shift;
    $str =~ s/^\s+//;
    $str =~ s/\s+$//;
    return($str);
}

#===============================================================================
# EscChars
# escapes characters for shell safty
# parameters: str
#===============================================================================
sub EscChars {
    my $str = shift;
    #$str =~ s/([;<>\*\|`&\$!#\(\)\[\]\{\}:'"])/\\$1/g;
    $str =~ s/(["])/\\$1/g;
    return($str);
}

#===============================================================================
# EscSet
# escapes picture set name for proper matching with picasa
# parameters: str
#===============================================================================
sub EscSet {
    my $str = shift;
    $str = EscChars($str);
    $str =~ s/([\(\)])/\\$1/g;
    return($str);
}

#===============================================================================
# End of File
#===============================================================================
