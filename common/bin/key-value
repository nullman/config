#!/usr/bin/env bash
#===============================================================================
# key-value
#
# Interface to a key-value data dictionary.
#
# Author: Kyle W T Sherman
#===============================================================================

# key/value base dir
base="${HOME}/key-value"

# make sure base dir exists
if [[ ! -d ${base} ]] ; then
    mkdir -p "${base}"
fi

# process parameters
op="$1"
shift
file="$1"
shift
query=
key=
value=
newkey=
help=0
case "${op}" in
    select|s|grep|g)
        query="$@"
        ;;
    insert|i|update|u|replace|p)
        key="$1"
        shift
        value="$@"
        ;;
    rename|r)
        key="$1"
        shift
        newkey="$1"
        ;;
    delete|d)
        key="$1"
        ;;
    create)
        ;;
    drop)
        key="$1"
        ;;
    list)
        ;;
    *)
        help=1
        ;;
esac

# remove non-alpha-numeric values from keys
key=$(echo ${key} | tr -c -d /A-Za-z0-9_/)
newkey=$(echo ${newkey} | tr -c -d /A-Za-z0-9_/)

# temp file
temp="${file}.tmp$$"
if [[ -e ${base}/${temp} ]] ; then
    echo "ERROR: Temp file '${temp}' already exists"
    exit 1
fi

# # debug
# echo op: ${op}
# echo file: ${file}
# echo query: ${query}
# echo key: ${key}
# echo value: ${value}
# echo newkey: ${newkey}

# usage/help
if [[ ${help} -eq 1 ]] ; then
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> a45a426 (Update)
    cat <<EOF
Usage: $(basename $0) OPERATION (FILE|DIR) ARGUMENT...
Interface to a key-value data dictionary.

  OPERATION options (abbreviations in parenthesis):
    select  (s)  query by key
    grep    (g)  query keys and values via grep
    insert  (i)  add new key/value
    update  (u)  update existing value for a given key
    replace (p)  insert or update key/value
    rename  (r)  rename existing key
    delete  (d)  delete existing key
    create       create new file
    drop         drop existing file
    list         list files
  FILE      key/value database file, relative to '${base}'
  DIR       directory of database files, relative to '${base}'
  ARGUMENT  extra parameter based on the operation being performed

  Operation Arguments:
    select  FILE QUERY
    grep    FILE QUERY
    insert  FILE KEY VALUE
    update  FILE KEY VALUE
    replace FILE KEY VALUE
    rename  FILE KEY NEWKEY
    delete  FILE KEY
    create  FILE
    drop    FILE drop
    list    DIR

  FILE    key/value file
  DIR     file directory
  QUERY   grep string to match by
  KEY     specific key in the database
  VALUE   any text string
  NEWKEY  an unused key

Notes:
  Files and keys may contain only alpha-numeric values (and underscores).
  All other values are quietly trimmed before any action is taken.
  The replace command will do an insert if the key does not exist,
  or an update if it already exists.
  The drop command requires the keyword 'drop' to be given as a precaution.
EOF
<<<<<<< HEAD
=======
    echo "Usage: $(basename $0) OPERATION (FILE|DIR) ARGUMENT..."
    echo "Interface to a key-value data dictionary."
    echo
    echo "  OPERATION options (abbreviations in parenthesis):"
    echo "    select  (s)  query by key"
    echo "    grep    (g)  query keys and values via grep"
    echo "    insert  (i)  add new key/value"
    echo "    update  (u)  update existing value for a given key"
    echo "    replace (p)  insert or update key/value"
    echo "    rename  (r)  rename existing key"
    echo "    delete  (d)  delete existing key"
    echo "    create       create new file"
    echo "    drop         drop existing file"
    echo "    list         list files"
    echo "  FILE      key/value database file, relative to '${base}'."
    echo "  DIR       directory of database files, relative to '${base}'."
    echo "  ARGUMENT  extra parameter based on the operation being performed."
    echo
    echo "  Operation Arguments:"
    echo "    select FILE QUERY"
    echo "    grep FILE QUERY"
    echo "    insert FILE KEY VALUE"
    echo "    update FILE KEY VALUE"
    echo "    replace FILE KEY VALUE"
    echo "    rename FILE KEY NEWKEY"
    echo "    delete FILE KEY"
    echo "    create FILE"
    echo "    drop FILE drop"
    echo "    list DIR"
    echo
    echo "  FILE    key/value file"
    echo "  DIR     file directory"
    echo "  QUERY   grep string to match by"
    echo "  KEY     specific key in the database"
    echo "  VALUE   any text string"
    echo "  NEWKEY  an unused key"
    echo
    echo "Notes:"
    echo "  Files and keys may contain only alpha-numeric values (and underscores)."
    echo "  All other values are quietly trimmed before any action is taken."
    echo "  The replace command will do an insert if the key does not exist,"
    echo "  or an update if it already exists."
    echo "  The drop command requires the keyword 'drop' to be given as a precaution."
>>>>>>> 6554bfc (Initial commit after splitting home configuration files into public and private repos)
=======
>>>>>>> a45a426 (Update)
    exit 1
fi

# make sure file does not go outside of base dir
if [[ "${file}" != "$(echo ${file} | sed 's/\.\.//g')" ]] ; then
    echo "ERROR: File '${file}' contains '..' which is not allowed"
    exit 1
fi

# handle list
if [[ "${op}" == "list" ]] ; then
    if [[ -d "${base}/${file}" ]] ; then
        ls -1 "${base}/${file}"
    else
        echo "ERROR: Argument '${file}' is not a directory"
    fi
    exit 1
fi

# handle create and drop
# for other operations, check that file exists
case "${op}" in
    create)
        if [[ ! -e "${base}/${file}" ]] ; then
            if [[ ! -d "${base}/${file}" ]] ; then
                dir=$(echo "${base}/${file}" | sed 's/\/[^\/]\+$//')
                if [[ -d "${dir}" ]] ; then
                    touch "${base}/${file}"
                    echo "Created: ${file}"
                else
                    echo "ERROR: Directory '${dir}' does not exist"
                fi
            else
                echo "ERROR: File '${file}' is a directory"
            fi
        else
            echo "ERROR: File '${file}' already exists"
        fi
        exit 1
        ;;
    drop)
        if [[ -e "${base}/${file}" ]] ; then
            if [[ ! -d "${base}/${file}" ]] ; then
                if [[ "${key}" == "drop" ]] ; then
                    rm "${base}/${file}"
                    echo "Dropped: ${file}"
                else
                    if [[ -z "${key}" ]] ; then
                        echo "ERROR: Keyword 'drop' not given"
                    else
                        echo "ERROR: Keyword '${key}' was not 'drop'"
                    fi
                fi
            else
                echo "ERROR: File '${file}' is a directory"
            fi
        else
            echo "ERROR: File '${file}' does not exist"
        fi
        exit 1
        ;;
    *)
        if [[ ! -f "${base}/${file}" ]] ; then
            echo "ERROR: File '${file}' does not exist"
            exit 1
        fi
        ;;
esac

# process operation
case "${op}" in
    select|s)
        cat "${base}/${file}" | grep "^${query}: "
        ;;
    grep|g)
        cat "${base}/${file}" | grep "${query}"
        ;;
    insert|i)
        if [[ -z $(cat "${base}/${file}" | sed 's/: .*$//' |
                    grep -q "${key}" && echo 1) ]] ; then
            cat "${base}/${file}" > "${base}/${temp}"
            echo "${key}: ${value}" >> "${base}/${temp}"
            sort -t : "${base}/${temp}" > "${base}/${file}"
            rm -f "${base}/${temp}"
            echo "Inserted: ${key} = ${value}"
        else
            echo "ERROR: Key '${key}' already exists"
        fi
        ;;
    update|u)
        if [[ -z $(cat "${base}/${file}" | sed 's/: .*$//' |
                    grep -q "${key}" || echo 1) ]] ; then
            cat "${base}/${file}" | sed "/^${key}: .*$/d" > "${base}/${temp}"
            echo "${key}: ${value}" >> "${base}/${temp}"
            sort -t : "${base}/${temp}" > "${base}/${file}"
            rm -f "${base}/${temp}"
            echo "Updated: ${key} = ${value}"
        else
            echo "ERROR: Key '${key}' does not already exist"
        fi
        ;;
    replace|p)
        cat "${base}/${file}" | sed "/${key}: .*$/d" > "${base}/${temp}"
        echo "${key}: ${value}" >> "${base}/${temp}"
        sort -t : "${base}/${temp}" > "${base}/${file}"
        rm -f "${base}/${temp}"
        echo "Replaced: ${key} = ${value}"
        ;;
    rename|r)
        value=$(cat "${base}/${file}" | grep "^${key}: " | sed 's/^.*: //')
        cat "${base}/${file}" | sed "/^${key}: .*$/d" > "${base}/${temp}"
        echo "${newkey}: ${value}" >> "${base}/${temp}"
        sort -t : "${base}/${temp}" > "${base}/${file}"
        rm -f "${base}/${temp}"
        echo "Renamed: ${key} to ${newkey}"
        ;;
    delete|d)
        cat "${base}/${file}" | sed "/^${key}: .*$/d" > "${base}/${temp}"
        sort -t : "${base}/${temp}" > "${base}/${file}"
        rm -f "${base}/${temp}"
        echo "Deleted: ${key}"
        ;;
    *)
        echo "ERROR: Operation '${op}' is not valid"
        ;;
esac

#===============================================================================
# End of File
#===============================================================================
