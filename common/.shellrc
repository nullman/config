#!/usr/bin/env bash
#=============================================================================
# .shellrc
#
# Shell Run Commands
#
# File to be sourced from main shell script (i.e. .bashrc and .zshrc).
#
# Author: Kyle W T Sherman
#=============================================================================

# source funct
[[ -f "${HOME}/.funct" ]] && source "${HOME}/.funct" 2>&1

# source alias
[[ -f "${HOME}/.alias" ]] && source "${HOME}/.alias" 2>&1

# add to the run path
export runpath="${runpath}:${HOME}/.shellrc"
logger "Running: ${HOME}/.shellrc"

# operating system
os="$(uname -s)"

# check if executable command is found in the path
_command() {
    command -v "$1" > /dev/null 2>&1
}

# add path entry before or after existing path entries, preventing duplicates
_pathadd() {
    if [[ -d "$1" ]] ; then
        local p=$(cd "$1" && pwd)
        if [[ -n "${p}" ]] ; then
            if [[ -z "${PATH}" ]] ; then
                PATH="${p}"
            else
                local newpath=$(echo ":${PATH}:" | sed "s%:${p}:%:%g ; s%^:%% ; s%:$%%")
                if [[ "$2" == "before" ]] ; then
                    PATH="${p}:${newpath}"
                else
                    PATH="${newpath}:${p}"
                fi
            fi
        fi
    fi
}

# add infopath entry before or after existing infopath entries, preventing duplicates
_infopathadd() {
    if [[ -d "$1" ]] ; then
        local p=$(cd "$1" && pwd)
        if [[ -n "${p}" ]] ; then
            if [[ -z "${INFOPATH}" ]] ; then
                INFOPATH="${p}"
            else
                local newinfopath=$(echo ":${INFOPATH}:" | sed "s%:${p}:%:%g ; s%^:%% ; s%:$%%")
                if [[ "$2" == "before" ]] ; then
                    INFOPATH="${p}:${newinfopath}"
                else
                    INFOPATH="${newinfopath}:${p}"
                fi
            fi
        fi
    fi
}

# set environmental vars
export USERNAME="${USER}"
export HOSTNAME="$(uname -n)"
export home="${HOME}"
#export DISPLAY=":0.0"
[[ "${USER}" == "root" ]] && export DISPLAY=":0.0"
[[ -z "${REAL_TERM}" ]] && export REAL_TERM="${TERM}" # keep original TERM value for scripts to use
#[[ "${TERM}" == "urxvt-256color" ]] && export TERM="urxvt"
[[ -z "${TERM}" ]] && export TERM="xterm-256color" # act like xterm with color support
export TERMINAL="${TERM}"
export PAGER="less"
export LESS="--CLEAR-SCREEN --quit-if-one-screen --ignore-case --jump-target=10 --LONG-PROMPT --RAW-CONTROL-CHARS --no-init --tilde --shift 4"
export MANPAGER="less"
#_command bat && export BAT_THEME="ansi-dark" && export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export PROCESS_SHELL="$(ps -hp $$ | awk '{print $5}')"
export EDITOR="emacs-edit"                 # default terminal editor
export VISUAL="${EDITOR}"               # default GUI editor
#export EDITOR="emacsclient -t -a ''"    # default terminal editor
#export VISUAL="emacsclient -c -a emacs" # default GUI editor
export GIT_EDITOR="emacs-edit-wait"
export BROWSER="firefox"
export NNTPSERVER="netnews.comcast.net"
#export NNTPSERVER="news.usenetserver.com"
export EMAIL="kylewsherman@gmail.com"
#export MAIL="/var/mail/${USER}"
unset MAIL
#export MAILDIR="${HOME}/.maildir"
#export MAILDIR="imap://morpheus.nullware.com/kyle"
export LEDGER_FILE="${HOME}/ledger/checking-kyle.dat"
export GOROOT="/usr/lib/go"
export GOPATH="${HOME}/gocode"
export SDKMAN_DIR="${HOME}/.sdkman"
export GEM_HOME="$(_command ruby && ruby -e 'print Gem.user_dir')"

# android
[[ -d "/usr/local/share/android-sdk" ]] && export ANDROID_SDK="/usr/local/share/android-sdk"
[[ -d "${HOME}/Library/Android/sdk" ]] && export ANDROID_SDK="${HOME}/Library/Android/sdk"
[[ -d "${HOME}/android-sdk" ]] && export ANDROID_SDK="${HOME}/android-sdk"
export ANDROID_SDK_ROOT="${ANDROID_SDK}"
[[ -d "/usr/local/share/android-ndk" ]] && export ANDROID_NDK="/usr/local/share/android-ndk"
[[ -d "${HOME}/Library/Android/sdk/ndk-bundle" ]] && export ANDROID_SDK="${HOME}/Library/Android/sdk/ndk-bundle"
[[ -d "${HOME}/android-sdk/ndk-bundle" ]] && export ANDROID_NDK="${HOME}/android-sdk/ndk-bundle"
export ANDROID_NDK_HOME="${ANDROID_NDK}"

# shell colors
export COLOR_DEFAULT="\[\033[0m\]"      # light yellow
export COLOR_BLACK="\[\033[0;30m\]"
export COLOR_DARK_GRAY="\[\033[1;30m\]"
export COLOR_RED="\[\033[0;31m\]"
export COLOR_LIGHT_RED="\[\033[1;31m\]"
export COLOR_GREEN="\[\033[0;32m\]"
export COLOR_LIGHT_GREEN="\[\033[1;32m\]"
export COLOR_BROWN="\[\033[0;33m\]"
export COLOR_YELLOW="\[\033[1;33m\]"
export COLOR_LIGHT_YELLOW="\[\033[0m\]"
export COLOR_BLUE="\[\033[0;34m\]"
export COLOR_LIGHT_BLUE="\[\033[1;34m\]"
export COLOR_PURPLE="\[\033[0;35m\]"
export COLOR_LIGHT_PURPLE="\[\033[1;35m\]"
export COLOR_CYAN="\[\033[0;36m\]"
export COLOR_LIGHT_CYAN="\[\033[1;36m\]"
export COLOR_LIGHT_GRAY="\[\033[0;37m\]"
export COLOR_WHITE="\[\033[1;37m\]"

# path additions
# path addition "befores" in reverse order
[[ -d "/usr/games" ]] && _pathadd "/usr/games" before
[[ -d "/usr/local/games" ]] && _pathadd "/usr/local/games" before
[[ "${os}" == "Darwin" ]] && [[ -d "/usr/local/opt/coreutils/libexec/gnubin" ]] && _pathadd "/usr/local/opt/coreutils/libexec/gnubin" before
[[ -d "/bin" ]] && _pathadd "/bin" before
[[ -d "/usr/bin" ]] && _pathadd "/usr/bin" before
[[ -d "/usr/local/bin" ]] && _pathadd "/usr/local/bin" before
[[ -d "/sbin" ]] && _pathadd "/sbin" before
[[ -d "/usr/sbin" ]] && _pathadd "/usr/sbin" before
[[ -d "/usr/local/sbin" ]] && _pathadd "/usr/local/sbin" before
# path addition "afters" in order
_pathadd "${HOME}/bin"
_pathadd "${HOME}/bin/vendor"
_pathadd "${HOME}/.nix-profile/bin"
_pathadd "${HOME}/node_modules/.bin"
_pathadd "${ANDROID_SDK}/emulator"
_pathadd "${ANDROID_SDK}/tools"
_pathadd "${ANDROID_SDK}/tools/bin"
_pathadd "${ANDROID_SDK}/platform-tools"
[[ -d "${ANDROID_SDK}/build-tools" ]] && BUILD_TOOLS_DIR="$(find ${ANDROID_SDK}/build-tools/ -mindepth 1 -maxdepth 1 -type d | sort -n | tail -n 1)"
_pathadd "${BUILD_TOOLS_DIR}"
_pathadd "${HOME}/android-studio/bin"
_command ruby && [[ -d "${HOME}/.gem/ruby" ]] && _pathadd "$(find ${HOME}/.gem/ruby/ -mindepth 1 -maxdepth 1 -type d | sort -n | tail -n 1)/bin"
_pathadd "${HOME}/code/cc65/bin"
_pathadd "${HOME}/code/commander-x16/x16-emulator"
_pathadd "${HOME}/coursera/algs4/bin"
_pathadd "${GOROOT}/bin"
_pathadd "${GOPATH}/bin"
_pathadd "${SDKMAN_DIR}/candidates/kotlin/current/bin"
_pathadd "${HOME}/.cargo/bin"
export PATH

# cd path
CDPATH=":.:/mnt:/home/data/media:/home/data/media/audio/Music:${HOME}"
export CDPATH

# add libraries to LD_LIBRARY_PATH
echo "${LD_LIBRARY_PATH}" | grep -q "/usr/lib" || LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/lib"
echo "${LD_LIBRARY_PATH}" | grep -q "/usr/local/lib" || LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib"

# info path
_infopathadd "/usr/share/info" before
export INFOPATH

# set screen temp dir
export SCREENDIR="${HOME}/.screendir"
[[ -d "${SCREENDIR}" ]] || mkdir -p -m 700 "${SCREENDIR}"

# # ssh-agent
# #pstest ssh-add || ssh-add > /dev/null 2>&1
# pstest ssh-agent || ssh-agent > /dev/null 2>&1

# # keychain for one-time entry of ssh passphrase
# [[ -d "${HOME}/.ssh" ]] && eval "$(keychain --quiet --eval id_rsa)"

# set XDG_DOWNLOAD_DIR
export XDG_DOWNLOAD_DIR="${HOME}/Downloads"

# set XDG_DATA_DIRS
export XDG_DATA_DIRS="/usr/local/share:/usr/share"
# add flatpak support
export XDG_DATA_DIRS="${XDG_DATA_DIRS}:${HOME}/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share"

# set java home
[[ "${os}" == "Linux" ]] && _command java && export JAVA_HOME="$(java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home' | sed 's/^.* = //')"
[[ "${os}" == "Darwin" ]] && [[ -x /usr/libexec/java_home ]] && export JAVA_HOME="$(/usr/libexec/java_home)"

# # set oracle environment
# source /etc/.oracle_profile

# set vitualenv environment
export WORKON_HOME="${HOME}/.virtualenvs"
export PROJECT_HOME="${HOME}/.virtualenv-projects"
[[ -x "/usr/local/bin/virtualenvwrapper.sh" ]] && source "/usr/local/bin/virtualenvwrapper.sh" 2>&1

# set prodvd key
export CDR_SECURITY="8:dvd,clone:sparc-sun-solaris2,i386-pc-solaris2,i586-pc-linux\,powerpc-apple,hppa,powerpc-ibm-aix,i386-unknown-freebsd,i386-unknown-openbsd,i38\6-unknown-netbsd,powerpc-apple-netbsd,i386-pc-bsdi,mips-sgi-irix,i386-pc-sco:1.11\::1093000000:::private/research/educational_non-commercial_use:9vl2T2kP6w6O4h.bXu\et8hP1Z3H5erm3qWmxhbcr.fHvuN8ZJbhQUWBzjAc"

# # set ocaml package manager environment
# [[ -x "${HOME}/.opam/opam-init/init.sh" ]] && source "${HOME}/.opam/opam-init/init.sh" > /dev/null 2>&1

# nvm
[[ -f "/usr/share/nvm/init-nvm.sh" ]] && source "/usr/share/nvm/init-nvm.sh" 2>&1
# move nvm bin path after sbin
nvmpath=$(echo ":${PATH}:" | grep -E ":${HOME}/\.nvm/[^:]*:" | sed "s%^.*:\\(${HOME}/\.nvm/[^:]*\\):.*$%\1%")
if [[ -n "${nvmpath}" ]] ; then
    newpath=$(echo ":${PATH}:" | sed "s%:${HOME}/\.nvm/[^:]*:%:%g ; s%^:%% ; s%:$%%")
    export PATH=$(echo ${newpath} | sed "s%^\\(.*/sbin:\\)\\(.*\\)$%\1${nvmpath}:\2%")
fi

# opam (ocaml package manager)
#[[ "${SHELL: -4}" == "bash" ]] && [[ -f "${HOME}/.opam/opam-init/init.sh" ]] && source "${HOME}/.opam/opam-init/init.sh" 2>&1
#[[ "${SHELL: -3}" == "zsh" ]] && [[ -f "${HOME}/.opam/opam-init/init.zsh" ]] && source "${HOME}/.opam/opam-init/init.zsh" 2>&1

# # run-app
# [[ -x "${HOME}/bin/run-app" ]] && ${HOME}/bin/run-app 2>&1

# broot
[[ -f "${HOME}/.config/broot/launcher/bash/br" ]] && source "${HOME}/.config/broot/launcher/bash/br" 2>&1

# source work shellrc
[[ -e "${HOME}/.work" ]] && [[ -f "${HOME}/.shellrc-work" ]] && source "${HOME}/.shellrc-work" 2>&1

# source secure environment settings
[[ -f "${HOME}/.secure-env" ]] && source "${HOME}/.secure-env" 2>&1

# display something

# display system information
_command neofetch && neofetch 2>&1

# # display color script
# _command colorscript && colorscript random 2>&1

# # display weather
# _command curl && curl --silent wttr.in 2>&1 | head -n 7

#=============================================================================
# End of File
#=============================================================================
